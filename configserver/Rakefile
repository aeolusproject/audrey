# -*- ruby -*-
# Rakefile: build aeolus config server
#
#   Copyright [2011] [Red Hat, Inc.]
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#  limitations under the License.
#
# Greg Blomquist <gblomqui@redhat.com>

# Rakefile for ruby-rpm -*- ruby -*-
require 'rake'
require 'rake/testtask'
require 'rake/clean'
require 'rubygems'
require 'rubygems/package_task'

version = '0.4.12'
man_section = '8'
pkg_name = 'aeolus-configserver'

SPEC_FILE_IN="aeolus-configserver.spec.in"
SPEC_FILE="aeolus-configserver.spec"
CONFIG_IN="src/common_config.in.rb"
CONFIG="src/common_config.rb"
SETUP="configure/bin/config_httpd.sh"
MAN="aeolus-configserver-setup.8"
LOGS="*/log/*"

GENERATED_FILES=[
  [SPEC_FILE_IN,SPEC_FILE,"version",true,nil],
  [CONFIG_IN,CONFIG,"version",true,nil],
  [SETUP,MAN,"man",true,nil]
]

#
# Package tasks
#

# This FileList deliberatly does not include both the spec and common_config.ru
# files, since these both go through variable substitution in the RPM task
# below.  And, rake uses hard links to copy files into the package location,
# which would change both the packaged file and the file in the source tree.
configserver_files = FileList[
  SPEC_FILE_IN,
  CONFIG_IN,
  "Rakefile", "COPYING",
  "schema/*.rng",
  "src/**/*.*",
  "conf/*",
  "client/*",
  "configure/**/*",
  "examples/**/*",
].exclude(LOGS)

spec = Gem::Specification.new do |s|
  s.name = pkg_name
  s.version = version
  s.email = "aeolus-devel@fedorahosted.org"
  s.homepage = "http://aeolusproject.org"
  s.summary = "Aeolus Config Server"
  s.files = configserver_files
  s.required_ruby_version = '>= 1.8.1'
  s.author = "Greg Blomquist"
  s.rubyforge_project = "None"
  s.description = "Aeolus Config Server."
end

p = Gem::PackageTask.new(spec) do |pkg|
  pkg.need_tar = true
  pkg.need_zip = false
end

# Allow for generated files
# In this case, we allow for files that replace the "@VERSION@" text with the
# actual package version.  Some generated files are packaged, while others are
# simply used during packaging.
GENERATED_FILES.each do |(source_file,dest_file,action,is_packaged,block)|
  # create the file task to generate the file
  if is_packaged
    packaged_name = "#{p.package_name}/#{dest_file}"
    dependencies = [p.package_dir_path] + p.package_files
  else
    packaged_name = dest_file
    dependencies = [p.package_dir] + p.package_files
  end

  if block != nil
    block.call(source_file, packaged_name, dependencies, p)
  elsif action == "version"
    cmd = "sed -e 's/@VERSION@/#{version}/' #{source_file} " \
        "> #{p.package_dir}/#{packaged_name}"
    file "#{p.package_dir}/#{packaged_name}" => dependencies do
      system("#{cmd}")
    end
  elsif action == "man"
    cmd = "help2man --name='Aeolus Config Server Setup' " \
      "--section #{man_section} " \
      "--no-info #{source_file} > #{p.package_dir}/#{packaged_name}"
    file "#{p.package_dir}/#{packaged_name}" => dependencies do
      system("#{cmd}")
    end
  else
    puts "Unrecognized action: #{action}, continuing."
  end

  # make the zip/tar/etc. task depend on the created file task
  [
    [p.need_tar, p.tgz_file],
    [p.need_tar_gz, p.tar_gz_file],
    [p.need_tar_bz2, p.tar_bz2_file],
    [p.need_zip, p.zip_file]
  ].each do |(need, ar_file)|
    if need
      task "#{p.package_dir}/#{ar_file}" => ["#{p.package_dir}/#{packaged_name}"]
    end
  end
end

# Clean up the build destination
CLEAN.include('pkg')
CLEAN.include('aeolus-configserver-setup.8')

spec_path  = "#{p.package_name}/#{SPEC_FILE}"
setup_path = "#{p.package_name}/#{SETUP}"


# Build the (S)RPMs
desc "Build (S)RPMs for #{pkg_name}"
task :rpm => [ :package ] do |t|
  Dir::chdir("pkg") do |dir|
    dir = File::expand_path(".")
    system("which rpmbuild &> /dev/null")
    if $? != 0
      raise "No rpmbuild command found. Please install the " \
          "rpm-build package to run the rpm rake task."
    end
    # set pipefail so if the command fails, it's status is reported back
    # to the rake task
    cmd = "set -o pipefail && rpmbuild " \
          "--define '_sourcedir #{dir}' " \
          "-ba #{spec_path} | tee rpmbuild.log 2>&1"
    system(cmd)
    cmd_status = $?
    if cmd_status != 0
      raise "#{cmd} failed (exit code: #{cmd_status})"
    end
  end
end

# Build the SRPM
desc "Build SRPM for #{pkg_name}"
task :srpm => [ :package ] do |t|
  Dir::chdir("pkg") do |dir|
    dir = File::expand_path(".")
    system("which rpmbuild &> /dev/null")
    if $? != 0
      raise "No rpmbuild command found. Please install the " \
          "rpm-build package to run the rpm rake task."
    end
    # set pipefail so if the command fails, it's status is reported back
    # to the rake task
    cmd = "set -o pipefail && rpmbuild " \
          "--define '_sourcedir #{dir}' " \
          "-bs #{spec_path} | tee rpmbuild.log 2>&1"
    system(cmd)
    cmd_status = $?
    if cmd_status != 0
      raise "#{cmd} failed (exit code: #{cmd_status})"
    end
  end
end

desc 'Run tests'
task :test do
  Dir::chdir("src") do |dir|
    sh "rspec spec"
 end
end

desc 'Mesures test coverage'
task :coverage do
  Dir::chdir("src") do |dir|
    rm_f "coverage"
    sh "rcov -TIspec --exclude ruby\/,spec\/ spec/*_spec.rb"
 end
end

# Default Build all
desc "Build (S)RPMs for #{pkg_name}"
task :default => [ :rpm ]
